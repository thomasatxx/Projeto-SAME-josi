/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.VIEW;

import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import br.com.Controler.AtividadesCadastro;
import br.com.Controler.HistoricoCadastro;
import br.com.Controler.TeclasMaiusculasCaracteres;
import br.com.Controler.TeclasMaiusculasEspacos;
import br.com.Controler.TeclasNumeros;
import br.com.JDBC.Oracle;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.Connection;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.ResolverStyle;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author User
 */
public class Atividades extends javax.swing.JFrame {

    /**
     * Creates new form AtividadesCadastro
     *
     * @param login
     */
    public Atividades(String login, boolean flag) {
        this.con = new Oracle("10.9.1.210", "amb", "arquivo");// cria uma conexão
        initComponents();//chama todos os components
        this.fields = new JTextField[]{campoName, campoPront, campoData, campoDataAlta, campoMedico, campoObs};//cria um array de Jtextfield
        this.box = new JComboBox[]{boxConv, boxAtendimentos, boxSolicitante};//cria um array e comboBox
        this.login = login;//passa o login do usuário
        campoNome.setDocument(new TeclasMaiusculasEspacos());//campo nome só aceitara letras maiusculas
        campoName.setDocument(new TeclasMaiusculasEspacos());
        campoMedico.setDocument(new TeclasMaiusculasEspacos());
        campoObs.setDocument(new TeclasMaiusculasCaracteres());//campo obs só aceitara letras maiusculas e numeros e caracteres especiais
        campoDescricao.setDocument(new TeclasMaiusculasCaracteres());
        campoPront.setDocument(new TeclasNumeros());//campo de prontuario só aceitara numeros
        campoDesc.setDocument(new TeclasMaiusculasCaracteres());
        atualizar();
        setIcon();
        this.flag = flag;
    }

    private void setIcon() {
        URL caminhoIcone = getClass().getResource("/br/com/IMG/logo.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
        this.setIconImage(iconeTitulo);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private String login;
    private JTextField[] fields;
    private JComboBox[] box;
    private Oracle con;
    private boolean flag;

    private Atividades() {
        this("ADMIN", true);//chama o construtor de cima
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        incluirHistorico = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jlObs = new javax.swing.JLabel();
        btnIncluir = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        campoDesc = new javax.swing.JTextArea();
        Menu = new javax.swing.JTabbedPane();
        Atividades = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAtividades = new javax.swing.JTable();
        campoNome = new javax.swing.JTextField();
        btnListar = new javax.swing.JButton();
        selPendente = new javax.swing.JRadioButton();
        selIniciada = new javax.swing.JRadioButton();
        selFinalizada = new javax.swing.JRadioButton();
        selCancelada = new javax.swing.JRadioButton();
        selPronta = new javax.swing.JRadioButton();
        txtNome = new javax.swing.JLabel();
        Cadastro = new javax.swing.JPanel();
        painelInfo = new javax.swing.JPanel();
        txtCod = new javax.swing.JLabel();
        txtName = new javax.swing.JLabel();
        txtPront = new javax.swing.JLabel();
        txtAtendimento = new javax.swing.JLabel();
        txtData = new javax.swing.JLabel();
        txtDataCadastro = new javax.swing.JLabel();
        txtDataLimite = new javax.swing.JLabel();
        txtStatus = new javax.swing.JLabel();
        txtConv = new javax.swing.JLabel();
        txtDataAlta = new javax.swing.JLabel();
        txtLogin = new javax.swing.JLabel();
        txtMédico = new javax.swing.JLabel();
        campoCod = new javax.swing.JTextField();
        campoName = new javax.swing.JTextField();
        campoPront = new javax.swing.JTextField();
        boxConv = new javax.swing.JComboBox<>();
        boxAtendimentos = new javax.swing.JComboBox<>();
        campoData = new javax.swing.JFormattedTextField();
        campoDataAlta = new javax.swing.JFormattedTextField();
        campoDataCadastro = new javax.swing.JFormattedTextField();
        campoDataLimi = new javax.swing.JFormattedTextField();
        campoMedico = new javax.swing.JTextField();
        campoLogin = new javax.swing.JTextField();
        boxStatus = new javax.swing.JComboBox<>();
        txtDescricao = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        campoDescricao = new javax.swing.JTextArea();
        btnNew = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnEditar = new javax.swing.JToggleButton();
        btnCancelar = new javax.swing.JButton();
        txtObs = new javax.swing.JLabel();
        campoObs = new javax.swing.JTextField();
        btnImprimir = new javax.swing.JButton();
        txtSolicitante = new javax.swing.JLabel();
        boxSolicitante = new javax.swing.JComboBox<>();
        txtDataEnc = new javax.swing.JLabel();
        campoDataEnc = new javax.swing.JTextField();
        painelHistorico = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHistorico = new javax.swing.JTable();
        btnIncluirHist = new javax.swing.JButton();

        incluirHistorico.setTitle("Incluir Histórico");
        incluirHistorico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        incluirHistorico.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width/3,Toolkit.getDefaultToolkit().getScreenSize().height/3);
        incluirHistorico.setMinimumSize(new java.awt.Dimension(549, 247));
        incluirHistorico.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        incluirHistorico.setResizable(false);
        incluirHistorico.setSize(new java.awt.Dimension(550, 250));

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jlObs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlObs.setText("Observação:");

        ImageIcon salvar = new ImageIcon(getClass().getResource("/br/com/IMG/salvar.png"));
        salvar.setImage(salvar.getImage().getScaledInstance(80, 80, 1));
        btnIncluir.setIcon(salvar);
        btnIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirActionPerformed(evt);
            }
        });

        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        campoDesc.setColumns(20);
        campoDesc.setLineWrap(true);
        campoDesc.setRows(5);
        campoDesc.setTabSize(1);
        campoDesc.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        campoDesc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoDescKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlObs))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ImageIcon sair = new ImageIcon(getClass().getResource("/br/com/IMG/sair.png"));
        sair.setImage(sair.getImage().getScaledInstance(65, 65, 1));
        btnSair.setIcon(sair);

        javax.swing.GroupLayout incluirHistoricoLayout = new javax.swing.GroupLayout(incluirHistorico.getContentPane());
        incluirHistorico.getContentPane().setLayout(incluirHistoricoLayout);
        incluirHistoricoLayout.setHorizontalGroup(
            incluirHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, incluirHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        incluirHistoricoLayout.setVerticalGroup(
            incluirHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, incluirHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Controle de Atividades");
        setResizable(false);

        Menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuMouseClicked(evt);
            }
        });

        Atividades.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblAtividades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Título 5", "Título 6", "Título 7", "Título 8", "Título 9", "Título 10"
            }
        ));
        tblAtividades.setGridColor(new java.awt.Color(0, 0, 0));
        tblAtividades.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblAtividades.setSelectionForeground(new java.awt.Color(239, 239, 239));
        tblAtividades.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAtividades.getTableHeader().setResizingAllowed(false);
        tblAtividades.getTableHeader().setReorderingAllowed(false);
        tblAtividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAtividadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAtividades);

        campoNome.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        campoNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoNomeMouseClicked(evt);
            }
        });
        campoNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoNomeKeyReleased(evt);
            }
        });

        ImageIcon pesquisa = new ImageIcon(getClass().getResource("/br/com/IMG/pesquisa.png"));
        pesquisa.setImage(pesquisa.getImage().getScaledInstance(172,60,1));
        btnListar.setIcon(pesquisa);

        getRootPane().setDefaultButton(btnListar);
        btnListar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnListar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        selPendente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selPendente.setText("PENDENTE");

        selIniciada.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selIniciada.setText("INICIADA");

        selFinalizada.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selFinalizada.setText("FINALIZADA");

        selCancelada.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selCancelada.setText("CANCELADA");

        selPronta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selPronta.setText("PRONTA");

        txtNome.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNome.setText("NOME:");

        javax.swing.GroupLayout AtividadesLayout = new javax.swing.GroupLayout(Atividades);
        Atividades.setLayout(AtividadesLayout);
        AtividadesLayout.setHorizontalGroup(
            AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AtividadesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(AtividadesLayout.createSequentialGroup()
                        .addComponent(txtNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AtividadesLayout.createSequentialGroup()
                        .addComponent(selPendente)
                        .addGap(18, 18, 18)
                        .addComponent(selIniciada)
                        .addGap(18, 18, 18)
                        .addComponent(selPronta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selFinalizada)
                        .addGap(13, 13, 13)
                        .addComponent(selCancelada)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 365, Short.MAX_VALUE)
                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        AtividadesLayout.setVerticalGroup(
            AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AtividadesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AtividadesLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(AtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selPendente)
                            .addComponent(selIniciada)
                            .addComponent(selFinalizada)
                            .addComponent(selCancelada)
                            .addComponent(selPronta)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AtividadesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addContainerGap())
        );

        Menu.addTab("Atividades", Atividades);

        Cadastro.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        painelInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCod.setText("Cod:");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtName.setText("Nome:");

        txtPront.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPront.setText("Prontuário:");

        txtAtendimento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtAtendimento.setText("Tipo Atendimento:");

        txtData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtData.setText("Data Atendimento:");

        txtDataCadastro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDataCadastro.setText("Data Cadastro:");

        txtDataLimite.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDataLimite.setText("Data Limite:");

        txtStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStatus.setText("Status:");

        txtConv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtConv.setText("Convênio:");

        txtDataAlta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDataAlta.setText("Data Alta:");

        txtLogin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtLogin.setText("Cadastrado Por:");

        txtMédico.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMédico.setText("Médico:");

        campoCod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoCod.setEnabled(false);

        campoName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoName.setEnabled(false);

        campoPront.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoPront.setEnabled(false);

        boxConv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxConv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AMIL", "BRADESCO", "CAIXA", "CASSI", "CISVIR", "COPEL", "CORREIOS", "DPVAT", "PARTICULAR", "POSTAL SAUDE", "SANEPAR", "SUL AMERICA", "SUS", "UNIMED" }));
        boxConv.setEnabled(false);

        boxAtendimentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AMBULATORIAL", "INTERNAMENTO" }));
        boxAtendimentos.setEnabled(false);

        try {
            campoData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        campoData.setEnabled(false);
        campoData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        try {
            campoDataAlta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        campoDataAlta.setEnabled(false);
        campoDataAlta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        try {
            campoDataCadastro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        campoDataCadastro.setEnabled(false);
        campoDataCadastro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        try {
            campoDataLimi.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        campoDataLimi.setEnabled(false);
        campoDataLimi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        campoMedico.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoMedico.setEnabled(false);

        campoLogin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoLogin.setEnabled(false);

        boxStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PENDENTE", "INICIADA", "PRONTA", "FINALIZADA", "CANCELADA" }));
        boxStatus.setEnabled(false);

        txtDescricao.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        txtDescricao.setText("Descrição:");

        campoDescricao.setColumns(20);
        campoDescricao.setLineWrap(true);
        campoDescricao.setRows(5);
        campoDescricao.setTabSize(1);
        campoDescricao.setEnabled(false);
        jScrollPane2.setViewportView(campoDescricao);

        btnNew.setText("Novo");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.setEnabled(false);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.setEnabled(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtObs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtObs.setText("Obs:");

        campoObs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoObs.setEnabled(false);

        btnImprimir.setText("IMPRIMIR");
        btnImprimir.setEnabled(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        txtSolicitante.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSolicitante.setText("Solicitante:");

        boxSolicitante.setEditable(true);
        boxSolicitante.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxSolicitante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "ADVOGADOS", "DEPOL", "FORUM", "MINISTERIO PUBLICO", "PODER JUDICIARIO", "TRE" }));
        boxSolicitante.setEnabled(false);

        txtDataEnc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDataEnc.setText("Data Encerramento:");

        campoDataEnc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoDataEnc.setEnabled(false);

        javax.swing.GroupLayout painelInfoLayout = new javax.swing.GroupLayout(painelInfo);
        painelInfo.setLayout(painelInfoLayout);
        painelInfoLayout.setHorizontalGroup(
            painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelInfoLayout.createSequentialGroup()
                        .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelInfoLayout.createSequentialGroup()
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtObs)
                                        .addGap(10, 10, 10)
                                        .addComponent(campoObs, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtMédico, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtSolicitante)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boxSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtDataEnc)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoDataEnc, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(painelInfoLayout.createSequentialGroup()
                        .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelInfoLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSalvar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelInfoLayout.createSequentialGroup()
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtCod)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoCod, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoName))
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtAtendimento)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(boxAtendimentos, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtData)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                        .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelInfoLayout.createSequentialGroup()
                                        .addComponent(txtPront)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoPront, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtConv)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boxConv, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtStatus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boxStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelInfoLayout.createSequentialGroup()
                                        .addGap(0, 13, Short.MAX_VALUE)
                                        .addComponent(txtDataAlta)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoDataAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDataCadastro)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDataLimite)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoDataLimi, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        painelInfoLayout.setVerticalGroup(
            painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCod)
                    .addComponent(txtName)
                    .addComponent(txtPront)
                    .addComponent(txtConv)
                    .addComponent(txtStatus)
                    .addComponent(campoCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoPront, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxConv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataCadastro)
                    .addComponent(txtData)
                    .addComponent(txtDataAlta)
                    .addComponent(txtAtendimento)
                    .addComponent(boxAtendimentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDataAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDataLimi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataLimite))
                .addGap(35, 35, 35)
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMédico)
                    .addComponent(txtLogin)
                    .addComponent(campoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtObs)
                    .addComponent(campoObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataEnc)
                    .addComponent(campoDataEnc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtDescricao)
                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelInfoLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(painelInfoLayout.createSequentialGroup()
                                .addGroup(painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painelInfoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        painelHistorico.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setMinimumSize(new java.awt.Dimension(23, 10));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(1500, 32));
        jScrollPane3.setViewportView(tblHistorico);

        tblHistorico.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "DATA", "LOGIN", "OBS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHistorico.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblHistorico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblHistorico.setEnabled(false);
        tblHistorico.setMaximumSize(new java.awt.Dimension(2147483647, 2147483646));
        tblHistorico.setMinimumSize(new java.awt.Dimension(2500, 50));
        tblHistorico.setName(""); // NOI18N
        tblHistorico.setPreferredSize(new java.awt.Dimension(3500, 64));
        tblHistorico.getTableHeader().setResizingAllowed(false);
        tblHistorico.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblHistorico);

        btnIncluirHist.setText("Incluir Histórico");
        btnIncluirHist.setEnabled(false);
        btnIncluirHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirHistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelHistoricoLayout = new javax.swing.GroupLayout(painelHistorico);
        painelHistorico.setLayout(painelHistoricoLayout);
        painelHistoricoLayout.setHorizontalGroup(
            painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(68, 68, 68)
                .addComponent(btnIncluirHist, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        painelHistoricoLayout.setVerticalGroup(
            painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelHistoricoLayout.createSequentialGroup()
                        .addComponent(btnIncluirHist, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(63, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout CadastroLayout = new javax.swing.GroupLayout(Cadastro);
        Cadastro.setLayout(CadastroLayout);
        CadastroLayout.setHorizontalGroup(
            CadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CadastroLayout.createSequentialGroup()
                        .addComponent(painelHistorico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        CadastroLayout.setVerticalGroup(
            CadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadastroLayout.createSequentialGroup()
                .addComponent(painelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Menu.addTab("Cadastros", Cadastro);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Menu)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Menu)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        atualizar();//ao clicar no botão listar, chama o método atualizar ↓
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        habilitar(this.fields, this.box);//ao clicar no botão novo habilita a os JtextFields e ComboBox através do metodo habilitar
        zerarTabela();//limpa a tabela histórico
        btnImprimir.setEnabled(false);
        btnNew.setEnabled(false);
        btnEditar.setEnabled(false);
        campoDescricao.setEnabled(true);
        campoDescricao.setText(null);
        btnSalvar.setEnabled(true);
        btnCancelar.setEnabled(true);
        campoData.setValue(null);
        campoDataAlta.setValue(null);
        campoCod.setText(null);
        campoDataEnc.setText(null);
        campoDataLimi.setValue(null);
        campoDataCadastro.setValue(null);
        boxStatus.setSelectedIndex(0);
        btnIncluirHist.setEnabled(false);
        campoLogin.setText(null);
        btnImprimir.setEnabled(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (isValidInsert()) {//valida todos os campos
            if (!btnEditar.isSelected()) {//se o botão editar não estiver selecionado
                if (this.flag == false) {
                    JOptionPane.showMessageDialog(null, this.login + ", você não tem permissão para inserir uma solicitação", "Info", JOptionPane.INFORMATION_MESSAGE);
                    btnCancelarActionPerformed(evt);
                } else if (JOptionPane.showConfirmDialog(null, "Confirma o cadastro de: \n" + campoName.getText() + " ?", "Atenção", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {//faz corfirmação
                    //faz uma inserção da solicitação
                    new AtividadesCadastro(Integer.parseInt(campoPront.getText()), campoName.getText(), campoData.getText(), campoDataAlta.getText(), login, boxConv.getSelectedItem().toString(),
                            campoMedico.getText(), campoObs.getText(), boxAtendimentos.getSelectedItem().toString(), campoDescricao.getText(), boxStatus.getSelectedItem().toString(),
                            boxSolicitante.getSelectedItem().toString());
                    btnNewActionPerformed(evt);
                }

                atualizar();//atualiza tabela

            } else if (btnEditar.isSelected()) {//se o botão editar estivar selecionado
                if (verificarstatus()) {//verifica se a solicitação já está finaliza ou cancelada
                    JOptionPane.showMessageDialog(null, "Atenção, Essa atividade já foi 'FINALIZADA' OU 'CANCELADA'!", "Atenção", JOptionPane.WARNING_MESSAGE);
                }
                if (JOptionPane.showConfirmDialog(null, "Confirma atualizar o cadastro de: \n" + campoName.getText() + " ?", "Atenção", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {//faz confirmação
                    //edita a solicitação
                    new AtividadesCadastro(Integer.parseInt(campoCod.getText()), Integer.parseInt(campoPront.getText()), campoName.getText(), campoData.getText(), campoDataAlta.getText(),
                            boxConv.getSelectedItem().toString(), campoMedico.getText(), campoObs.getText(), boxAtendimentos.getSelectedItem().toString(), campoDescricao.getText(),
                            boxStatus.getSelectedItem().toString(), boxSolicitante.getSelectedItem().toString(), this.login);
                    // btnCancelarActionPerformed(evt);
                    atualizarHistorico();
                    btnEditar.setSelected(false);
                    btnEditarActionPerformed(evt);
                }

                atualizar();//atualiza tabela
            }

        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos corretamente", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        //faz a verificação de certeza antes de exluir
        if (JOptionPane.showConfirmDialog(null, "Deseja realmente excluir o cadastro de:\n" + this.campoName.getText(), "Atenção", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            new AtividadesCadastro(Integer.parseInt(this.campoCod.getText()));//exlui a atividade
            btnCancelarActionPerformed(evt); //chama o evento cancelar
            atualizar();//atualiza a tabela novamente
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        desabilitar(fields, box);
        zerarTabela();
        btnImprimir.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnEditar.setSelected(false);
        btnNew.setEnabled(true);
        btnSalvar.setEnabled(false);
        campoDescricao.setEnabled(false);
        campoDescricao.setText(null);
        campoData.setValue(null);
        campoDataAlta.setValue(null);
        campoName.setText(null);
        campoObs.setText(null);
        campoName.requestFocus();
        campoCod.setText(null);
        campoDataEnc.setText(null);
        campoDataLimi.setValue(null);
        campoDataCadastro.setValue(null);
        boxStatus.setSelectedIndex(0);
        boxStatus.setEnabled(false);
        campoMedico.setText(null);
        campoPront.setText(null);
        campoLogin.setText(null);
        btnCancelar.setEnabled(false);
        btnEditar.setEnabled(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnIncluirHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirHistActionPerformed
        incluirHistorico.setVisible(true);
    }//GEN-LAST:event_btnIncluirHistActionPerformed
    /**
     * Método para preencher a tela de preenchimento de solicitaçoes através do
     * clique, e automaticamente preenche a tabela histórico referente a
     * solicitação clicada.
     *
     * @param evt
     */
    private void tblAtividadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAtividadesMouseClicked
        String sql = "SELECT A.COD,A.STATUS,A.NOME,to_char(A.DATA_ABERTURA,'dd/mm/yyyy'),to_char(A.DATA_LIMITE,'dd/mm/yyyy'),A.DETALHAMENTO,U.LOGIN,A.DATA_ALTA,to_char(A.DATA,'dd/mm/yyyy'),A.CONV,A.MEDICO,A.PRONT,to_char(A.DATA_ENC,'DD/MM/YYYY hh24:mi'),A.OBS,A.TIPO_ATENDIMENTO,A.SOLICITANTE "
                + "FROM ATIVIDADES A JOIN USUARIOS U ON (A.ID_LOGIN = U.ID_LOGIN) WHERE COD = " + tblAtividades.getValueAt(tblAtividades.getSelectedRow(), 0);
        String sqli = "SELECT NUM_HISTORICO AS COD,(TO_CHAR(H.DATA,'DD/MM/YYYY HH24:MI') || ' H') AS DATA,U.LOGIN,H.OBS FROM HISTORICO H JOIN USUARIOS U ON(H.ID_LOGIN = U.ID_LOGIN) "
                + "WHERE H.COD = ? ORDER BY H.DATA DESC";
        btnEditar.setSelected(false);
        this.con.connect();
        try {
            PreparedStatement st = this.con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                campoCod.setText(Integer.toString(rs.getInt(1)));
                boxStatus.setSelectedItem(rs.getString(2));
                campoName.setText(rs.getString(3));
                campoDataCadastro.setText(rs.getString(4));
                campoDataLimi.setText(rs.getString(5));
                campoDescricao.setText(rs.getString(6));
                campoLogin.setText(rs.getString(7));
                if (isDateValid((rs.getString(8)))) {
                    campoDataAlta.setText(rs.getString(8));
                } else {
                    campoDataAlta.setValue(null);
                };
                campoData.setText(rs.getString(9));
                boxConv.setSelectedItem(rs.getString(10));
                campoMedico.setText(rs.getString(11));
                campoPront.setText(Integer.toString(rs.getInt(12)));
                campoDataEnc.setText(rs.getString(13));
                campoObs.setText(rs.getString(14));
                boxAtendimentos.setSelectedItem(rs.getString(15));
                boxSolicitante.setSelectedItem(rs.getString(16));
                btnEditar.setEnabled(true);
                btnIncluirHist.setEnabled(true);
                st = this.con.c.prepareStatement(sqli);
                st.setInt(1, Integer.parseInt(this.campoCod.getText()));
                rs = st.executeQuery();
                tblHistorico.setModel(DbUtils.resultSetToTableModel(rs));
                tblHistorico.getColumnModel().getColumn(0).setPreferredWidth(40);
                tblHistorico.getColumnModel().getColumn(1).setPreferredWidth(140);
                tblHistorico.getColumnModel().getColumn(2).setPreferredWidth(60);
                tblHistorico.getColumnModel().getColumn(3).setPreferredWidth(3000);
                tblHistorico.setPreferredSize(new java.awt.Dimension(3500, tblHistorico.getRowCount() * 20));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro SQL : \n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }
        btnImprimir.setEnabled(true);
        btnExcluir.setEnabled(true);
        campoDescricao.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnCancelar.setEnabled(false);
        campoName.setEnabled(false);
        campoPront.setEnabled(false);
        boxConv.setEnabled(false);
        boxStatus.setEnabled(false);
        boxAtendimentos.setEnabled(false);
        campoData.setEnabled(false);
        campoDataAlta.setEnabled(false);
        campoMedico.setEnabled(false);
        boxSolicitante.setEnabled(false);
        campoObs.setEnabled(false);
        campoDescricao.setEnabled(false);
        btnImprimir.setEnabled(true);
    }//GEN-LAST:event_tblAtividadesMouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (btnEditar.isSelected()) {
            btnNew.setEnabled(false);
            campoDescricao.setEnabled(true);
            btnSalvar.setEnabled(true);
            btnCancelar.setEnabled(true);
            campoName.setEnabled(true);
            campoPront.setEnabled(true);
            boxConv.setEnabled(true);
            boxStatus.setEnabled(true);
            boxAtendimentos.setEnabled(true);
            campoData.setEnabled(true);
            campoDataAlta.setEnabled(true);
            campoMedico.setEnabled(true);
            boxSolicitante.setEnabled(true);
            campoObs.setEnabled(true);
            campoDescricao.setEnabled(true);
        } else {
            btnNew.setEnabled(true);
            campoDescricao.setEnabled(false);
            btnSalvar.setEnabled(false);
            btnCancelar.setEnabled(false);
            campoName.setEnabled(false);
            campoPront.setEnabled(false);
            boxConv.setEnabled(false);
            boxStatus.setEnabled(false);
            boxAtendimentos.setEnabled(false);
            campoData.setEnabled(false);
            campoDataAlta.setEnabled(false);
            campoMedico.setEnabled(false);
            boxSolicitante.setEnabled(false);
            campoObs.setEnabled(false);
            campoDescricao.setEnabled(false);
        }
    }//GEN-LAST:event_btnEditarActionPerformed
    /**
     * Método para verificar todos os botoes e faz uma pesquisa apenas das
     * selecoes escolhidas
     *
     * @param evt
     */
    private void campoNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNomeKeyReleased
        JRadioButton[] radio = {selPendente, selIniciada, selPronta, selFinalizada, selCancelada};
        LinkedList<String> sel = verificarMarcados(radio);
        String select = "SELECT A.COD, A.STATUS, A.NOME,A.PRONT,TIPO_ATENDIMENTO AS ATENDIMENTO, TO_CHAR(A.DATA,'DD/MM/YYYY') AS DATA, A.DATA_ALTA AS ALTA, TO_CHAR(A.DATA_ABERTURA,'DD/MM/YYYY hh24:mm')||' H' AS DATA_CADASTRO, TO_CHAR(A.DATA_LIMITE,'DD/MM/YYYY') AS DATA_LIMITE, U.LOGIN AS RESPONSAVEL "
                + "FROM ATIVIDADES A JOIN USUARIOS U ON (A.ID_LOGIN = U.ID_LOGIN) WHERE (";
        String where = "";
        String saida = "";
        if (sel.isEmpty()) {
            where = "NOME LIKE '" + campoNome.getText() + "%') ORDER BY STATUS";
            saida = select.concat(where);
        } else if (sel.size() == 1) {
            where += "STATUS = '" + sel.get(0) + "'";
            saida = select.concat(where).concat(") AND NOME LIKE '" + campoNome.getText() + "%'");
        } else if (sel.size() == 2) {
            where += "STATUS = '" + sel.get(0) + "' OR STATUS = '" + sel.get(1) + "'";
            saida = select.concat(where).concat(") AND NOME LIKE '" + campoNome.getText() + "%'");
        } else if (sel.size() == 3) {
            where += "STATUS = '" + sel.get(0) + "' OR STATUS = '" + sel.get(1) + "' OR STATUS = '" + sel.get(2) + "'";
            saida = select.concat(where).concat(") AND NOME LIKE '" + campoNome.getText() + "%'");
        } else if (sel.size() == 4) {
            where += "STATUS = '" + sel.get(0) + "' OR STATUS = '" + sel.get(1) + "' OR STATUS = '" + sel.get(2) + "' OR STATUS = '" + sel.get(3) + "'";
            saida = select.concat(where).concat(") AND NOME LIKE '" + campoNome.getText() + "%'");
        } else {
            where = "NOME LIKE '" + campoNome.getText() + "%') ORDER BY STATUS";
            saida = select.concat(where);
        }

        this.con.connect();
        try {
            PreparedStatement st = this.con.c.prepareStatement(saida);
            ResultSet rs = st.executeQuery();
            if (rs != null) {
                tblAtividades.setModel(DbUtils.resultSetToTableModel(rs));
            }
            tblAtividades.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblAtividades.getColumnModel().getColumn(2).setPreferredWidth(260);
            tblAtividades.getColumnModel().getColumn(3).setPreferredWidth(35);
            tblAtividades.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblAtividades.getColumnModel().getColumn(6).setPreferredWidth(50);
            tblAtividades.getColumnModel().getColumn(7).setPreferredWidth(100);
        } catch (SQLException ex) {
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }

    }//GEN-LAST:event_campoNomeKeyReleased

    private void MenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuMouseClicked
        atalho_CtrlN();
        atalho_CtrlD();
        atalho_CtrlS();
        atalho_CtrlP();
        atalho_CtrlZ();
    }//GEN-LAST:event_MenuMouseClicked

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        incluirHistorico.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirActionPerformed
        //verifica se existe alguma letra ou numero 
        if (!campoDesc.getText().trim().replaceAll(" +", " ").isEmpty()) {
            //faz uma confirmação
            if (JOptionPane.showConfirmDialog(null, "Deseja realmente inclur histórico com a descrição: \n '" + campoDesc.getText() + "'", "Atenção", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                new HistoricoCadastro(Integer.parseInt(campoCod.getText()), campoDesc.getText(), this.login);//insere um novo historico
                atualizarHistorico();//atualiza a tabela
                incluirHistorico.dispose();//e fecha o form
            }
            campoDesc.setText(null);//apaga o text
        } else {
            JOptionPane.showMessageDialog(null, "Preencha o campo da descrição antes de inserir!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnIncluirActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        this.con.connect();
        Connection conn = this.con.c;//pega a conexão do banco
        Map<String,Object> datas = new HashMap<>();//classe MAP (collection) parecido com ArrayList, só que mais simples, e usa menos memória
        try {
            //insere o segundo campo depois da virgua na variavel antes da virgula que foi feita no jaspersoft
            datas.put("cod", Integer.parseInt(this.campoCod.getText()));
            datas.put("nome", campoName.getText());
            datas.put("pront", Integer.parseInt(campoPront.getText()));
            datas.put("conv", boxConv.getSelectedItem().toString());
            datas.put("status", boxStatus.getSelectedItem().toString());
            datas.put("data", campoData.getText());
            datas.put("tipoAtendimento", boxAtendimentos.getSelectedItem().toString());
            datas.put("dataAlta", campoDataAlta.getText());
            datas.put("dataCadastro", campoDataCadastro.getText());
            datas.put("dataLimite", campoDataLimi.getText());
            datas.put("medico", campoMedico.getText());
            datas.put("login", campoLogin.getText());
            datas.put("solicitante", boxSolicitante.getSelectedItem().toString());
            datas.put("dataEnc", campoDataEnc.getText());
            datas.put("obs", campoObs.getText());
            datas.put("descricao", campoDescricao.getText());
            JasperPrint print = JasperFillManager.fillReport("RELATORIOS/ATIVIDADES/Relatoriopaciente.jasper", datas, conn);//passa o nome do carquivo, o objeto Collection, e a conexão

            JasperViewer.viewReport(print, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Erro: " + ex, "Erro de Relatórios", JOptionPane.ERROR_MESSAGE);
        } finally {
            this.con.disconnect();
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void campoNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoNomeMouseClicked
        selCancelada.setEnabled(true);
        selFinalizada.setEnabled(true);
        selIniciada.setEnabled(true);
        selPendente.setEnabled(true);
        selPronta.setEnabled(true);
    }//GEN-LAST:event_campoNomeMouseClicked

    private void campoDescKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDescKeyReleased
        campoDesc.setText(campoDesc.getText().toUpperCase());
    }//GEN-LAST:event_campoDescKeyReleased
    /**
     * Método para atualizar a tabela de histórico
     */
    private void atualizarHistorico() {
        this.con.connect();
        try {
            PreparedStatement st = this.con.c.prepareStatement("SELECT NUM_HISTORICO AS COD,(TO_CHAR(H.DATA,'DD/MM/YYYY HH24:MI') || ' H') AS DATA,U.LOGIN,H.OBS FROM HISTORICO H JOIN USUARIOS U ON(H.ID_LOGIN = U.ID_LOGIN) "
                    + " WHERE H.COD = ? ORDER BY H.DATA DESC");
            st.setInt(1, Integer.parseInt(campoCod.getText()));
            ResultSet rs = st.executeQuery();
            tblHistorico.setModel(DbUtils.resultSetToTableModel(rs));
            tblHistorico.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblHistorico.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblHistorico.getColumnModel().getColumn(2).setPreferredWidth(60);
            tblHistorico.getColumnModel().getColumn(3).setPreferredWidth(3000);
            tblHistorico.setPreferredSize(new java.awt.Dimension(3500, tblHistorico.getRowCount() * 20));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar os históricos", "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }
    }

    /**
     * Método para verificar o status da solicitação
     *
     * @return true se estiver FINALIZA ou CANCELADA.
     */
    private boolean verificarstatus() {
        this.con.connect();
        try {
            PreparedStatement st = this.con.c.prepareStatement("SELECT STATUS FROM ATIVIDADES WHERE COD = ?");
            st.setInt(1, Integer.parseInt(campoCod.getText()));
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                return (rs.getString(1).equals("FINALIZADA") || rs.getString(1).equals("CANCELADA"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }
        return false;
    }

    /**
     * Método de atalho CTRL+N, chama o evento novo
     */
    private void atalho_CtrlN() {
        btnNew.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK), "evento");
        btnNew.getActionMap().put("evento", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnNew.isEnabled()) {
                    btnNewActionPerformed(e);
                }
            }
        });
    }

    /**
     * Método de atalho CTRL+S, chama o evendo salvar
     */
    private void atalho_CtrlS() {
        btnSalvar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK), "evento");
        btnSalvar.getActionMap().put("evento", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnSalvar.isEnabled()) {
                    btnSalvarActionPerformed(e);
                }
            }
        });
    }

    /**
     * Método de atalho CTRL+D, chama o evento excluir
     */
    private void atalho_CtrlD() {
        btnExcluir.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_DOWN_MASK), "evento");
        btnExcluir.getActionMap().put("evento", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnExcluir.isEnabled()) {
                    btnExcluirActionPerformed(e);
                }
            }
        });
    }

    /**
     * Método de atalho CTRL+Z, chama o evento cancelar
     */
    private void atalho_CtrlZ() {
        btnCancelar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK), "evento");
        btnCancelar.getActionMap().put("evento", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnCancelar.isEnabled()) {
                    btnCancelarActionPerformed(e);
                }
            }
        });
    }

    /**
     * Método de atalho CTRL+P, chama o evento imprimir
     */
    private void atalho_CtrlP() {
        btnImprimir.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_P, InputEvent.CTRL_DOWN_MASK), "evento");
        btnImprimir.getActionMap().put("evento", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnImprimir.isEnabled()) {
                    btnImprimirActionPerformed(e);
                } else {
                    JOptionPane.showMessageDialog(null, "Não existe solicitação para imprimir", "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }

    /**
     * Método para validar antes de inserir
     *
     * @return true que passou pela verificação de todos os campos obrigatórios,
     * e false se não passou.
     */
    private boolean isValidInsert() {

        if (campoPront.getText().isEmpty() || campoName.getText().isEmpty() || !isDateValid(campoData.getText()) || boxConv.getSelectedIndex() == 0 || campoMedico.getText().isEmpty()) {
            return false;
        }
        return true;
    }

    /**
     * Método para habilitar os Combobox e JtextField
     *
     * @param field array de JtextField
     * @param box array de Combobox
     */
    private void habilitar(JTextField[] field, JComboBox[] box) {
        for (int i = 0; i < field.length; i++) {
            field[i].setEnabled(true);
            field[i].setText(null);
        }
        for (int i = 0; i < box.length; i++) {
            box[i].setEnabled(true);
            box[i].setSelectedIndex(0);
        }
    }

    /**
     * Método para desabilitar os Combobox e JtextField
     *
     * @param field array de JtextField
     * @param box array de Combobox
     */
    private void desabilitar(JTextField[] field, JComboBox[] box) {
        for (int i = 0; i < field.length; i++) {
            field[i].setEnabled(false);
            field[i].setText(null);
        }
        for (int i = 0; i < box.length; i++) {
            box[i].setEnabled(false);
            box[i].setSelectedIndex(0);
        }
    }

    /**
     * Método que verifica a data se realmente existe no calendário
     *
     * @param strDate data a ser comparada
     * @return
     */
    private static boolean isDateValid(String strDate) {
        String dateFormat = "dd/MM/uuuu";//formato data de 8 digitos

        DateTimeFormatter dateTimeFormatter = DateTimeFormatter // cria objeto da classe 
                .ofPattern(dateFormat)//adiciona o padrão
                .withResolverStyle(ResolverStyle.STRICT);
        try {
            LocalDate date = LocalDate.parse(strDate, dateTimeFormatter);// se a data estiver certa retorna true
            return true;
        } catch (DateTimeParseException e) {//se aquele método gerar um erro retorna falso
            return false;
        }
    }

    /**
     * Método para atualizar a tabela de solicitacoes
     */
    private void atualizar() {
        String sql = "SELECT A.COD, A.STATUS, A.NOME,A.PRONT,TIPO_ATENDIMENTO AS ATENDIMENTO,TO_CHAR(A.DATA,'DD/MM/YYYY') AS DATA, A.DATA_ALTA AS ALTA, TO_CHAR(A.DATA_ABERTURA,'DD/MM/YYYY hh24:mi')||' H' AS DATA_CADASTRO, TO_CHAR(A.DATA_LIMITE,'DD/MM/YYYY') AS DATA_LIMITE, U.LOGIN AS RESPONSAVEL FROM ATIVIDADES A "
                + "JOIN USUARIOS U ON(A.ID_LOGIN = U.ID_LOGIN) ORDER BY A.DATA_ABERTURA DESC";
        this.con.connect();
        ResultSet rs = null;
        try {
            PreparedStatement st = this.con.c.prepareStatement(sql);
            rs = st.executeQuery();
            if (rs != null) {
                tblAtividades.setModel(DbUtils.resultSetToTableModel(rs));
            }
            tblAtividades.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblAtividades.getColumnModel().getColumn(2).setPreferredWidth(260);
            tblAtividades.getColumnModel().getColumn(3).setPreferredWidth(35);
            tblAtividades.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblAtividades.getColumnModel().getColumn(6).setPreferredWidth(50);
            tblAtividades.getColumnModel().getColumn(7).setPreferredWidth(100);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar tabela: \n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }
        selCancelada.setEnabled(false);
        selFinalizada.setEnabled(false);
        selIniciada.setEnabled(false);
        selPendente.setEnabled(false);
        selPronta.setEnabled(false);
        tblAtividades.getColumnModel().getColumn(1).setCellRenderer(render);
    }

    /**
     * Método para zerar a tabela de histórico
     */
    private void zerarTabela() {
        String sql = "SELECT DUMMY AS COD,DUMMY AS DATA,DUMMY AS LOGIN, DUMMY AS OBS FROM DUAL";
        this.con.connect();
        ResultSet rs = null;
        try {
            PreparedStatement st = this.con.c.prepareStatement(sql);
            rs = st.executeQuery();
            tblHistorico.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar tabela: \n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Atividades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.con.disconnect();
        }
    }

    /**
     * Método para pegar os Radio Buttons marcados
     *
     * @param select um array de todos os radio buttons
     * @return retorna uma lista ligada com todos os botoes que foram marcados
     * apenas
     */
    private LinkedList<String> verificarMarcados(JRadioButton[] select) {
        LinkedList<String> status = new LinkedList<>();
        for (int i = 0; i < select.length; i++) {
            if (select[i].isSelected()) {
                status.addLast(select[i].getText());
            }
        }
        return status;
    }
    
    /**
     * Sobrescrevendo meu próprio renderer
     */
    DefaultTableCellRenderer render = new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            String str = (String) value;
            if ("PENDENTE".equals(str)) {
                c.setForeground(new Color(255, 0, 0));
            }else if("INICIADA".equals(str)){
                c.setForeground(new Color(0, 255, 0));
            }else if("PRONTA".equals(str)){
                c.setForeground(new Color(255, 154, 0));
            }else if("FINALIZADA".equals(str)){
                c.setForeground(new Color(0, 0, 255));
            }else if("CANCELADA".equals(str)){
                c.setForeground(new Color(255, 6, 213));
            }
            return c;
        }

    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Atividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Atividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Atividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Atividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Atividades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Atividades;
    private javax.swing.JPanel Cadastro;
    private javax.swing.JTabbedPane Menu;
    private javax.swing.JComboBox<String> boxAtendimentos;
    private javax.swing.JComboBox<String> boxConv;
    private javax.swing.JComboBox<String> boxSolicitante;
    private javax.swing.JComboBox<String> boxStatus;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JToggleButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnIncluir;
    private javax.swing.JButton btnIncluirHist;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JTextField campoCod;
    private javax.swing.JFormattedTextField campoData;
    private javax.swing.JFormattedTextField campoDataAlta;
    private javax.swing.JFormattedTextField campoDataCadastro;
    private javax.swing.JTextField campoDataEnc;
    private javax.swing.JFormattedTextField campoDataLimi;
    private javax.swing.JTextArea campoDesc;
    private javax.swing.JTextArea campoDescricao;
    private javax.swing.JTextField campoLogin;
    private javax.swing.JTextField campoMedico;
    private javax.swing.JTextField campoName;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoObs;
    private javax.swing.JTextField campoPront;
    private javax.swing.JDialog incluirHistorico;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlObs;
    private javax.swing.JPanel painelHistorico;
    private javax.swing.JPanel painelInfo;
    private javax.swing.JRadioButton selCancelada;
    private javax.swing.JRadioButton selFinalizada;
    private javax.swing.JRadioButton selIniciada;
    private javax.swing.JRadioButton selPendente;
    private javax.swing.JRadioButton selPronta;
    private javax.swing.JTable tblAtividades;
    private javax.swing.JTable tblHistorico;
    private javax.swing.JLabel txtAtendimento;
    private javax.swing.JLabel txtCod;
    private javax.swing.JLabel txtConv;
    private javax.swing.JLabel txtData;
    private javax.swing.JLabel txtDataAlta;
    private javax.swing.JLabel txtDataCadastro;
    private javax.swing.JLabel txtDataEnc;
    private javax.swing.JLabel txtDataLimite;
    private javax.swing.JLabel txtDescricao;
    private javax.swing.JLabel txtLogin;
    private javax.swing.JLabel txtMédico;
    private javax.swing.JLabel txtName;
    private javax.swing.JLabel txtNome;
    private javax.swing.JLabel txtObs;
    private javax.swing.JLabel txtPront;
    private javax.swing.JLabel txtSolicitante;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables
}
